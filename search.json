[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GitHub Pages Starter Guide",
    "section": "",
    "text": "Preface\nThe following is a quick starter guide designed to get you acquainted with GitHub Pages, an option for you to create a personal website.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "create.html",
    "href": "create.html",
    "title": "1  Creating Your Website",
    "section": "",
    "text": "To create a personal website with GitHub, you must already have a GitHub account. If you do not, please make one.\nThese instructions largely follow the instructions from GitHub, found here.\n\nIn GitHub, create a new repository called username.github.io where username is replaced by your actual username. For example, if my username is pandabear, my repository is called pandabear.github.io\nOn your desktop, create a folder. I called mine “Personal_Website”\nClone your GitHub repository to your local folder. You can do this with your IDE of choice or through the command line.\n\n\nTo copy the full repository link from your GitHub repository, use the green clone button, and then the copy icon. Paste this where your IDE asks for it.\n\n\nOr if you are using your command line, you can change directory (using the cd command) into your “Personal_Website” folder and then type out “git clone &lt;paste your link here&gt;”.\n\n\nNow, create a new file inside of your repository called “index.html”\nInside the file, copy and paste this text:  &lt;!DOCTYPE html&gt;  &lt;html&gt;  &lt;body&gt;  &lt;h1&gt;Hello World&lt;/h1&gt;  &lt;p&gt;I’m hosted with GitHub Pages.&lt;/p&gt;  &lt;/body&gt;  &lt;/html&gt; \nSave your file.\nCommit and push your changes to GitHub.\nCheck in your GitHub repository to make sure that the commit is pushed. You should see index.html with the commit message that you gave it.\nCheck your actual website by going to username.github.io. It should say (in very basic styling):\n\nHello World\n\n\nI’m hosted with GitHub Pages.\n\nNow that our site is hosted correctly, we can actually build our site to look how we want it!\n\n\nIf you need more instructions about committing and pushing to GitHub, check out our Git and GitHub Guide.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Creating Your Website</span>"
    ]
  },
  {
    "objectID": "template.html",
    "href": "template.html",
    "title": "2  Choosing a Template",
    "section": "",
    "text": "Now, find a website template that you’d like to use. There are a lot of free ones from https://html5up.net/. Or, if you are already savvy with HTML or web design, you may choose to make your own website from scratch. You can also use Jekyll themes that are designed for GitHub Pages, too.\nSome of the templates that we recommend for multiple-page websites include:\n\nHTML5Up’s Editorial\nHTML5Up’s Stellar\nHTML5Up’s Arcana\nHTML5Up’s Minimaxing\n\nIf you’d like a 1-page website, some templates include:\n\nHTML5Up’s Read Only\nHTML5Up’s Strata\n\nRegardless of your desired choice, the set-up remains the same.\n\nDownload the template that you like.\nGo into your downloads folder.\nCopy and paste all of this content into your repository folder (username.github.io)\nIf the downloaded items include an index.html, you will need to delete your original, barebones index.html we created earlier. (If you are on a Mac, it will ask you automatically).\nCommit your changes and push them to GitHub.\nAfter a few minutes, the build should be deployed and you should see this template hosted on your website now.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Choosing a Template</span>"
    ]
  },
  {
    "objectID": "customizing.html",
    "href": "customizing.html",
    "title": "3  Personalizing Your Website",
    "section": "",
    "text": "To personalize your website, you will need to change all of the text and images that are currently in your template.\nIf your site has one page, you will likely only need to edit your index.html file. If your site has more pages, there will be additional .html files for you to edit. To change your styling, there should be a main.css file inside of the assets/css/ folder. Here you can change stylings, like color, text size, and fonts.\nOpen any of the .html files in your coding IDE to edit them. You can replace the text via editing. To replace images, you will need to create an images folder inside of your username.github.io repository, where you can download images to. You will then have to use image tags &lt;img src=“images/specific_path_to_photo.png”&gt; in your .html files.\nAdditionally, you may want to create more .html files, especially if you’d like an individual page for each of your publications, etc. You may want to delete some of the .html files that you don’t use from the template, too. Just make sure that your index.html or other .html files you do use do not link to the files you delete, or your page will get 404 errors if someone clicks on those links.\nMake sure to save, commit, and push all of your changes to GitHub. We recommend doing this repeatedly, so that you can see your edits taking effect as you edit your site. This may take a few minutes after pushing. When you are in your GitHub repository, you should see a green checkmark next to your commit message to tell you that your build has successfully deployed.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Personalizing Your Website</span>"
    ]
  },
  {
    "objectID": "domain.html",
    "href": "domain.html",
    "title": "4  Adding a Custom Domain",
    "section": "",
    "text": "Customizing your domain name can be a complicated process. The full GitHub instrections can be found here.\nThese instructions assume that you already have ownership of the custom domain that you would like to use, as well as knowledge about your specific DNS provider.\n\n\nGo to your GitHub repository\n\n\nClick Settings\n\n\nIn the left-hand menu bar, select Pages\n\n\nScroll down to the Custom Domain section\n\n\nEnter your custom domain in the textbox. GitHub recommends always using www at the front of your domain. For example, instead of using example.com, you would use www.example.com\n\n\nHit Save\n\n\nNavigate to your DNS provider and create a CNAME record that points your subdomain to the default domain for your site.\n\n\nExample: if you want to use www.example.com, you will create a CNAME record that points www.example.com to &lt;username&gt;.github.io. Note that this is the user page, not a repository name.\n\n\nInstructions for creating a CNAME record vary by DNS provider. GitHub recommends using your DNS provider’s documentation .\n\n\n\nGitHub does not recommend configuring apex domains (e.g., example.com as opposed to www.example.com), but others suggest that if you would like your GitHub pages to display for both your apex domain and your www subdomain, you should also include four A records in your DNS provider’s web console.\n\n\n\n185.199.108.153\n\n\n185.199.109.153\n\n\n185.199.110.153\n\n\n185.199.111.153\n\n\n\nConfirm that your DNS record is configured correctly using the terminal.\n\n\nIn the terminal, type: dig WWW.EXAMPLE.COM +nostats +nocomments +nocmd where WWW.EXAMPLE.COM should be replaced with your custom domain name.\n\n\nYou should see the GitHub pages link in the output.\n\n\nThis can take some time to propogate\n\n\n\nGo back to your GitHub repository.\n\n\nGo to Settings &gt; Pages &gt; Custom domain\n\n\nCheck off Enforce HTTPS",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Adding a Custom Domain</span>"
    ]
  }
]